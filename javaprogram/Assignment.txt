1>What is java?
   It is a platform independent
   java is an object oriented programming language
  features of java:
  simple-It does not have operating overloaded,multiple inheritance,pointers.
  object oriented-it has organizing programs as collection of objects.
  platform independent-It is an operating systems like windows,linux,mac
  portable-it is a machine code ,that can be transfered to one machine to another machine.
  distributed-java programs can be distributed on more than one systems that are connected to each other using internet connections.
  secure-we dont have pointers,data loss.excess data is not acceptable.we have high security.
  robust-garbage collection,exception handling,memory allocation.
  multithread-two or more programs execute in a same time.
2>Who found out the java and when?
     sun microsystems in 1995
3>What is the latest version of java and list out the versions present so far.
  java 23 is the latest version
  Java 1.0 (1996)
 Java 1.1 (1997)
 Java 1.2 (1998)
 Java 1.3 (2000)
 Java 1.4 (2002)
 Java 5 (2004)
 Java 6 (2006)
Java 7 (2011)
Java 8 (2014, LTS)
Java 9 (2017)
Java 10 (2018)
Java 11 (2018, LTS)
Java 12 (2019)
Java 13 (2019)
Java 14 (2020)
Java 15 (2020)
Java 16 (2021)
Java 17 (2021, LTS)
Java 18 (2022)
Java 19 (2022)
Java 20 (2023)
Java 21 (2023, LTS)
Java 22 (2024)
Java 23 (2024)

4>What all the features of java?
features of java:
  simple-It does not have operating overloaded,multiple inheritance,pointers.
  object oriented-it has organizing programs as collection of objects.
  platform independent-It is an operating systems like windows,linux,mac
  portable-it is a machine code ,that can be transfered to one machine to another machine.
  distributed-java programs can be distributed on more than one systems that are connected to each other using internet connections.
  secure-we dont have pointers,data loss.excess data is not acceptable.we have high security.
  robust-garbage collection,exception handling,memory allocation.
  multithread-two or more programs execute in a same time.
5>Explain why java is platform independent?
  Compiler(javac) converts source code (.java file) to the byte code(.class file). 
 JVM executes the bytecode produced by compiler. 
This byte code can run on any platform such as Windows, Linux, Mac OS etc. 
A program that is compiled on windows can run on Linux and vice-versa. 
Each operating system has different JVM, however the output they produce after execution of bytecode is same across all operating systems. 

6>Why do we call java is simple?
   It does not have operating overloaded,multiple inheritance,pointers.
7>Explain architecture of java.
  Java Source Code:

Developers write code in .java files using the Java programming language.
Java Compiler (javac):

The compiler converts the Java source code into bytecode, which is stored in .class files. Bytecode is a platform-independent code.
Java Runtime Environment (JRE):

The JRE is needed to run Java applications. It includes:
Java Virtual Machine (JVM): This is the engine that executes the bytecode. It translates bytecode into machine code that the computer can understand.
Java Class Libraries: Pre-written code that provides various functionalities (like data handling, networking, etc.).
Execution:

When you run a Java program, the JVM loads the bytecode, verifies it for security, and executes it on your machine.
Key Components
JDK (Java Development Kit): Contains the tools for developing Java applications, including the compiler and JRE.
JRE (Java Runtime Environment): Contains the JVM and libraries needed to run Java applications.
JVM (Java Virtual Machine): Executes the bytecode and makes Java platform-independent.
8>Name different memory types and Explain each of them.
primary memory
secondary memory
cache memory
virtual memory
read only memory
9>Difference between jdk,jvm, jre.
1. JDK (Java Development Kit)
Definition: The JDK is a software development kit that provides the tools necessary for developing Java applications.
Components:
Java Compiler (javac): Converts Java source code into bytecode.
Java Runtime Environment (JRE): Includes the JVM and libraries needed to run Java applications.
Development Tools: Tools for debugging, documentation, and packaging applications (e.g., javadoc, jar).
Usage: Used by developers to write, compile, and debug Java applications.
2. JRE (Java Runtime Environment)
Definition: The JRE is a part of the JDK and provides the environment necessary to run Java applications.
Components:
Java Virtual Machine (JVM): Executes the bytecode.
Java Class Libraries: Pre-written classes and APIs that provide functionality for Java applications.
Usage: Used by end-users to run Java applications. It does not include development tools like the compiler.
3. JVM (Java Virtual Machine)
Definition: The JVM is an abstract computing machine that enables Java bytecode to be executed on any platform.
Components:
Class Loader: Loads class files into memory.
Bytecode Verifier: Ensures the bytecode is valid and secure.
Interpreter: Converts bytecode into machine code for execution.
Garbage Collector: Manages memory by reclaiming unused objects.
Usage: The core component that allows Java applications to run on any device with a compatible JVM, providing platform independence.
10>Name of java compiler and interpreter
 java compiler:javac
interpreter:java
11>Explain the components of JVM.
Class Loader: Loads class files into memory.
Bytecode Verifier: Validates bytecode for security and correctness.
Interpreter: Executes bytecode instructions.
JIT Compiler: Compiles bytecode into native machine code for performance.
Garbage Collector: Manages memory and reclaims unused objects.
Execution Engine: Executes the bytecode using the interpreter or JIT compiler.



12>Command used to compile the java program
javac
13>Command used to run the java program
java
14>What is JIT Compiler?
JIT Compiler: Compiles bytecode into native machine code for performance.
15>What is the ClassLoader and ByteCode verifier?
Class Loader: Loads class files into memory.
Bytecode Verifier: Validates bytecode for security andÂ correctness.